from collections import Counter
from math import gcd, sqrt

def isqrt(n):
    s = int(sqrt(n))
    if s * s == n:
        return s
    return None

def main():
    # any primitive right triangle can be generated by n^2 - m^2, 2 nm, n^2 + m^2
    # 4nm - n^2 + m^2 = pm 1
    # n^2 - 4nm - m^2 = pm 1
    # (n - m)(n + m) = 4nm + 1
    # right side is odd, so left must be odd
    # so n and m have different parities
    # n = 4, m = 1
    # 4nm - n^2 + m^2
    # This is monotonic with fixed n
    # approximate setting this to 0, try nearby values of m
    n = 2
    ans = []
    while len(ans) < 12:
        lo = 0
        hi = n
        while lo + 1 < hi:
            mid = (lo + hi) >> 1
            if 4 * n * mid - n * n + mid * mid < 0:
                lo = mid
            else:
                hi = mid
        if 4 * n * lo - n * n + lo * lo == -1:
            print(n, lo)
            ans.append(n * n + lo * lo)
        if 4 * n * hi - n * n + hi * hi == 1:
            print(n, hi)
            ans.append(n * n + hi * hi)

        n += 1
    print(ans)
    print(sum(ans))

main()
