from collections import Counter
from math import gcd

def perim(n, m):
    return 2 * n * (n + m)

def main():
    # any primitive right triangle can be generated by n^2 - m^2, 2 nm, n^2 + m^2
    # Proof that this construction works
    """
    (n^2 - m^2)^2 + (2nm)^2
    n^4 - 2n^2 m^2 + m^4 + 4n^2 m^2
    n^4 + 2n^2 m^2 + m^4
    (n^2 + m^2)^2
    """

    MAXL = 1500000

    c = Counter()
    m = 1

    while perim(m + 1, m) <= MAXL:
        n = m + 1

        while perim(n, m) <= MAXL:
            if (n + m) % 2 == 0 or gcd(n, m) != 1:
                n += 1
                continue

            d = 1

            while d * perim(n, m) <= MAXL:
                c[d * perim(n, m)] += 1
                d += 1

            n += 1

        m += 1

    print(sum(1 for x in c if c[x] == 1))

main()
